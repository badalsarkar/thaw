package de.be.thaw.math.mathml.tree.util.operator;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Dictionary holding default attribute values for operators based on their form and characters.
 * See https://www.w3.org/TR/MathML3/appendixc.html.
 */
public class OperatorDictionary {

    /**
     * Mapping of operator entries.
     */
    private static final Map<OperatorDictionaryEntryKey, OperatorDictionaryEntry> ENTRIES = new HashMap<>();

    static {
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2018'}, OperatorForm.PREFIX, "left single quotation mark", 10, 0, 0, true, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2019'}, OperatorForm.POSTFIX, "right single quotation mark", 10, 0, 0, true, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201C'}, OperatorForm.PREFIX, "left double quotation mark", 10, 0, 0, true, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201D'}, OperatorForm.POSTFIX, "right double quotation mark", 10, 0, 0, true, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0028'}, OperatorForm.PREFIX, "left parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false, '\u239B', null, '\u239D', '\u239C'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0029'}, OperatorForm.POSTFIX, "right parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false, '\u239E', null, '\u23A0', '\u239F'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005b'}, OperatorForm.PREFIX, "left square bracket", 20, 0, 0, true, true, false, true, false, false, false, false, '\u23A1', null, '\u23A3', '\u23A2'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005d'}, OperatorForm.POSTFIX, "right square bracket", 20, 0, 0, true, true, false, true, false, false, false, false, '\u23A4', null, '\u23A6', '\u23A5'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007b'}, OperatorForm.PREFIX, "left curly bracket", 20, 0, 0, true, true, false, true, false, false, false, false, '\u23A7', '\u23A8', '\u23A9', '\u23AA'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.PREFIX, "vertical line", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.POSTFIX, "vertical line", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.PREFIX, "multiple character operator: ||", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.POSTFIX, "multiple character operator: ||", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.PREFIX, "multiple character operator: |||", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.POSTFIX, "multiple character operator: |||", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007d'}, OperatorForm.POSTFIX, "right curly bracket", 20, 0, 0, true, true, false, true, false, false, false, false, '\u23AB', '\u23AC', '\u23AD', '\u23AA'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2016'}, OperatorForm.PREFIX, "double vertical line", 20, 0, 0, true, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2016'}, OperatorForm.POSTFIX, "double vertical line", 20, 0, 0, true, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2308'}, OperatorForm.PREFIX, "left ceiling", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2309'}, OperatorForm.POSTFIX, "right ceiling", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u230A'}, OperatorForm.PREFIX, "left floor", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u230B'}, OperatorForm.POSTFIX, "right floor", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2329'}, OperatorForm.PREFIX, "left-pointing angle bracket", 20, 0, 0, true, false, true, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u232A'}, OperatorForm.POSTFIX, "right-pointing angle bracket", 20, 0, 0, true, false, true, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2772'}, OperatorForm.PREFIX, "light left tortoise shell bracket ornament", 20, 0, 0, true, false, true, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2773'}, OperatorForm.POSTFIX, "light right tortoise shell bracket ornament", 20, 0, 0, true, false, true, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27E6'}, OperatorForm.PREFIX, "mathematical left white square bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27E7'}, OperatorForm.POSTFIX, "mathematical right white square bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27E8'}, OperatorForm.PREFIX, "mathematical left angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27E9'}, OperatorForm.POSTFIX, "mathematical right angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27EA'}, OperatorForm.PREFIX, "mathematical left double angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27EB'}, OperatorForm.POSTFIX, "mathematical right double angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27EC'}, OperatorForm.PREFIX, "mathematical left white tortoise shell bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27ED'}, OperatorForm.POSTFIX, "mathematical right white tortoise shell bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27EE'}, OperatorForm.PREFIX, "mathematical left flattened parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27EF'}, OperatorForm.POSTFIX, "mathematical right flattened parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2980'}, OperatorForm.PREFIX, "triple vertical bar delimiter", 20, 0, 0, true, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2980'}, OperatorForm.POSTFIX, "triple vertical bar delimiter", 20, 0, 0, true, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2983'}, OperatorForm.PREFIX, "left white curly bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2984'}, OperatorForm.POSTFIX, "right white curly bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2985'}, OperatorForm.PREFIX, "left white parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2986'}, OperatorForm.POSTFIX, "right white parenthesis", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2987'}, OperatorForm.PREFIX, "z notation left image bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2988'}, OperatorForm.POSTFIX, "z notation right image bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2989'}, OperatorForm.PREFIX, "z notation left binding bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298A'}, OperatorForm.POSTFIX, "z notation right binding bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298B'}, OperatorForm.PREFIX, "left square bracket with underbar", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298C'}, OperatorForm.POSTFIX, "right square bracket with underbar", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298D'}, OperatorForm.PREFIX, "left square bracket with tick in top corner", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298E'}, OperatorForm.POSTFIX, "right square bracket with tick in bottom corner", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u298F'}, OperatorForm.PREFIX, "left square bracket with tick in bottom corner", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2990'}, OperatorForm.POSTFIX, "right square bracket with tick in top corner", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2991'}, OperatorForm.PREFIX, "left angle bracket with dot", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2992'}, OperatorForm.POSTFIX, "right angle bracket with dot", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2993'}, OperatorForm.PREFIX, "left arc less-than bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2994'}, OperatorForm.POSTFIX, "right arc greater-than bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2995'}, OperatorForm.PREFIX, "double left arc greater-than bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2996'}, OperatorForm.POSTFIX, "double right arc less-than bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2997'}, OperatorForm.PREFIX, "left black tortoise shell bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2998'}, OperatorForm.POSTFIX, "right black tortoise shell bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FC'}, OperatorForm.PREFIX, "left-pointing curved angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FD'}, OperatorForm.POSTFIX, "right-pointing curved angle bracket", 20, 0, 0, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003b'}, OperatorForm.INFIX, "semicolon", 30, 0, 3, false, false, false, false, true, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002c'}, OperatorForm.INFIX, "comma", 40, 0, 3, false, false, false, false, true, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2063'}, OperatorForm.INFIX, "invisible separator", 40, 0, 0, false, false, false, false, true, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2234'}, OperatorForm.INFIX, "therefore", 70, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2235'}, OperatorForm.INFIX, "because", 70, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002d'}, OperatorForm.INFIX, "multiple character operator: ->", 90, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002e'}, OperatorForm.POSTFIX, "multiple character operator: ..", 100, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002e'}, OperatorForm.POSTFIX, "multiple character operator: ...", 100, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003a'}, OperatorForm.INFIX, "colon", 100, 1, 2, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u03F6'}, OperatorForm.INFIX, "greek reversed lunate epsilon symbol", 110, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2026'}, OperatorForm.INFIX, "horizontal ellipsis", 150, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22EE'}, OperatorForm.INFIX, "vertical ellipsis", 150, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22EF'}, OperatorForm.INFIX, "midline horizontal ellipsis", 150, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F1'}, OperatorForm.INFIX, "down right diagonal ellipsis", 150, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220B'}, OperatorForm.INFIX, "contains as member", 160, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A2'}, OperatorForm.INFIX, "right tack", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A3'}, OperatorForm.INFIX, "left tack", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A4'}, OperatorForm.INFIX, "down tack", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A8'}, OperatorForm.INFIX, "true", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A9'}, OperatorForm.INFIX, "forces", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AC'}, OperatorForm.INFIX, "does not prove", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AD'}, OperatorForm.INFIX, "not true", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AE'}, OperatorForm.INFIX, "does not force", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AF'}, OperatorForm.INFIX, "negated double vertical bar double right turnstile", 170, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2228'}, OperatorForm.INFIX, "logical or", 190, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0026'}, OperatorForm.INFIX, "multiple character operator: &&", 200, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2227'}, OperatorForm.INFIX, "logical and", 200, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2200'}, OperatorForm.PREFIX, "for all", 230, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2203'}, OperatorForm.PREFIX, "there exists", 230, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2204'}, OperatorForm.PREFIX, "there does not exist", 230, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2201'}, OperatorForm.INFIX, "complement", 240, 1, 2, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2208'}, OperatorForm.INFIX, "element of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2209'}, OperatorForm.INFIX, "not an element of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220C'}, OperatorForm.INFIX, "does not contain as member", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2282'}, OperatorForm.INFIX, "subset of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2282', '\u20D2'}, OperatorForm.INFIX, "subset of with vertical line", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2283'}, OperatorForm.INFIX, "superset of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2283', '\u20D2'}, OperatorForm.INFIX, "superset of with vertical line", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2284'}, OperatorForm.INFIX, "not a subset of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2285'}, OperatorForm.INFIX, "not a superset of", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2286'}, OperatorForm.INFIX, "subset of or equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2287'}, OperatorForm.INFIX, "superset of or equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2288'}, OperatorForm.INFIX, "neither a subset of nor equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2289'}, OperatorForm.INFIX, "neither a superset of nor equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228A'}, OperatorForm.INFIX, "subset of with not equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228B'}, OperatorForm.INFIX, "superset of with not equal to", 240, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0026'}, OperatorForm.INFIX, "multiple character operator: <=", 241, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2264'}, OperatorForm.INFIX, "less-than or equal to", 241, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2265'}, OperatorForm.INFIX, "greater-than or equal to", 242, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003e'}, OperatorForm.INFIX, "greater-than sign", 243, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003e'}, OperatorForm.INFIX, "multiple character operator: >=", 243, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226F'}, OperatorForm.INFIX, "not greater-than", 244, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0026'}, OperatorForm.INFIX, "less-than sign", 245, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226E'}, OperatorForm.INFIX, "not less-than", 246, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2248'}, OperatorForm.INFIX, "almost equal to", 247, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223C'}, OperatorForm.INFIX, "tilde operator", 250, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2249'}, OperatorForm.INFIX, "not almost equal to", 250, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2262'}, OperatorForm.INFIX, "not identical to", 252, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2260'}, OperatorForm.INFIX, "not equal to", 255, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0021'}, OperatorForm.INFIX, "multiple character operator: !=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002a'}, OperatorForm.INFIX, "multiple character operator: *=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002b'}, OperatorForm.INFIX, "multiple character operator: +=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002d'}, OperatorForm.INFIX, "multiple character operator: -=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002f'}, OperatorForm.INFIX, "multiple character operator: /=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003a'}, OperatorForm.INFIX, "multiple character operator: :=", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003d'}, OperatorForm.INFIX, "equals sign", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003d'}, OperatorForm.INFIX, "multiple character operator: ==", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u221D'}, OperatorForm.INFIX, "proportional to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2224'}, OperatorForm.INFIX, "does not divide", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2225'}, OperatorForm.INFIX, "parallel to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2226'}, OperatorForm.INFIX, "not parallel to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2241'}, OperatorForm.INFIX, "not tilde", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2243'}, OperatorForm.INFIX, "asymptotically equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2244'}, OperatorForm.INFIX, "not asymptotically equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2245'}, OperatorForm.INFIX, "approximately equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2246'}, OperatorForm.INFIX, "approximately but not actually equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2247'}, OperatorForm.INFIX, "neither approximately nor actually equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224D'}, OperatorForm.INFIX, "equivalent to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2254'}, OperatorForm.INFIX, "colon equals", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2257'}, OperatorForm.INFIX, "ring equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2259'}, OperatorForm.INFIX, "estimates", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225A'}, OperatorForm.INFIX, "equiangular to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225B'}, OperatorForm.INFIX, "star equals", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225C'}, OperatorForm.INFIX, "delta equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225F'}, OperatorForm.INFIX, "questioned equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2261'}, OperatorForm.INFIX, "identical to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2268'}, OperatorForm.INFIX, "less-than but not equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2269'}, OperatorForm.INFIX, "greater-than but not equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226A'}, OperatorForm.INFIX, "much less-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226A', '\u0338'}, OperatorForm.INFIX, "much less than with slash", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226B'}, OperatorForm.INFIX, "much greater-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226B', '\u0338'}, OperatorForm.INFIX, "much greater than with slash", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226D'}, OperatorForm.INFIX, "not equivalent to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2270'}, OperatorForm.INFIX, "neither less-than nor equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2271'}, OperatorForm.INFIX, "neither greater-than nor equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227A'}, OperatorForm.INFIX, "precedes", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227B'}, OperatorForm.INFIX, "succeeds", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227C'}, OperatorForm.INFIX, "precedes or equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227D'}, OperatorForm.INFIX, "succeeds or equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2280'}, OperatorForm.INFIX, "does not precede", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2281'}, OperatorForm.INFIX, "does not succeed", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A5'}, OperatorForm.INFIX, "up tack", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B4'}, OperatorForm.INFIX, "normal subgroup of or equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B5'}, OperatorForm.INFIX, "contains as normal subgroup or equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C9'}, OperatorForm.INFIX, "left normal factor semidirect product", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CA'}, OperatorForm.INFIX, "right normal factor semidirect product", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CB'}, OperatorForm.INFIX, "left semidirect product", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CC'}, OperatorForm.INFIX, "right semidirect product", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D4'}, OperatorForm.INFIX, "pitchfork", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D6'}, OperatorForm.INFIX, "less-than with dot", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D7'}, OperatorForm.INFIX, "greater-than with dot", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D8'}, OperatorForm.INFIX, "very much less-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D9'}, OperatorForm.INFIX, "very much greater-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22EA'}, OperatorForm.INFIX, "not normal subgroup of", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22EB'}, OperatorForm.INFIX, "does not contain as normal subgroup", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22EC'}, OperatorForm.INFIX, "not normal subgroup of or equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22ED'}, OperatorForm.INFIX, "does not contain as normal subgroup or equal", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25A0'}, OperatorForm.INFIX, "black square", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25A1'}, OperatorForm.INFIX, "white square", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25AA'}, OperatorForm.INFIX, "black small square", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25AB'}, OperatorForm.INFIX, "white small square", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25AD'}, OperatorForm.INFIX, "white rectangle", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25AE'}, OperatorForm.INFIX, "black vertical rectangle", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25AF'}, OperatorForm.INFIX, "white vertical rectangle", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B0'}, OperatorForm.INFIX, "black parallelogram", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B1'}, OperatorForm.INFIX, "white parallelogram", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B3'}, OperatorForm.INFIX, "white up-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B4'}, OperatorForm.INFIX, "black up-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B5'}, OperatorForm.INFIX, "white up-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B6'}, OperatorForm.INFIX, "black right-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B7'}, OperatorForm.INFIX, "white right-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B8'}, OperatorForm.INFIX, "black right-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B9'}, OperatorForm.INFIX, "white right-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25BC'}, OperatorForm.INFIX, "black down-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25BD'}, OperatorForm.INFIX, "white down-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25BE'}, OperatorForm.INFIX, "black down-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25BF'}, OperatorForm.INFIX, "white down-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C0'}, OperatorForm.INFIX, "black left-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C1'}, OperatorForm.INFIX, "white left-pointing triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C2'}, OperatorForm.INFIX, "black left-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C3'}, OperatorForm.INFIX, "white left-pointing small triangle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C4'}, OperatorForm.INFIX, "black left-pointing pointer", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C5'}, OperatorForm.INFIX, "white left-pointing pointer", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C6'}, OperatorForm.INFIX, "black diamond", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C7'}, OperatorForm.INFIX, "white diamond", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C8'}, OperatorForm.INFIX, "white diamond containing black small diamond", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25C9'}, OperatorForm.INFIX, "fisheye", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25CC'}, OperatorForm.INFIX, "dotted circle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25CD'}, OperatorForm.INFIX, "circle with vertical fill", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25CE'}, OperatorForm.INFIX, "bullseye", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25CF'}, OperatorForm.INFIX, "black circle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25D6'}, OperatorForm.INFIX, "left half black circle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25D7'}, OperatorForm.INFIX, "right half black circle", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25E6'}, OperatorForm.INFIX, "white bullet", 260, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C0'}, OperatorForm.INFIX, "circled less-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C1'}, OperatorForm.INFIX, "circled greater-than", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E3'}, OperatorForm.INFIX, "equals sign and slanted parallel", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E4'}, OperatorForm.INFIX, "equals sign and slanted parallel with tilde above", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E5'}, OperatorForm.INFIX, "identical to and slanted parallel", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E6'}, OperatorForm.INFIX, "gleich stark", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F3'}, OperatorForm.INFIX, "error-barred black circle", 260, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A87'}, OperatorForm.INFIX, "less-than and single-line not equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A88'}, OperatorForm.INFIX, "greater-than and single-line not equal to", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAF'}, OperatorForm.INFIX, "precedes above single-line equals sign", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAF', '\u0338'}, OperatorForm.INFIX, "precedes above single-line equals sign with slash", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB0'}, OperatorForm.INFIX, "succeeds above single-line equals sign", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB0', '\u0338'}, OperatorForm.INFIX, "succeeds above single-line equals sign with slash", 260, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2044'}, OperatorForm.INFIX, "fraction slash", 265, 4, 4, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2206'}, OperatorForm.INFIX, "increment", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220A'}, OperatorForm.INFIX, "small element of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220D'}, OperatorForm.INFIX, "small contains as member", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220E'}, OperatorForm.INFIX, "end of proof", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2215'}, OperatorForm.INFIX, "division slash", 265, 4, 4, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2217'}, OperatorForm.INFIX, "asterisk operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2218'}, OperatorForm.INFIX, "ring operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2219'}, OperatorForm.INFIX, "bullet operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u221F'}, OperatorForm.INFIX, "right angle", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2223'}, OperatorForm.INFIX, "divides", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2236'}, OperatorForm.INFIX, "ratio", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2237'}, OperatorForm.INFIX, "proportion", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2238'}, OperatorForm.INFIX, "dot minus", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2239'}, OperatorForm.INFIX, "excess", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223A'}, OperatorForm.INFIX, "geometric proportion", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223B'}, OperatorForm.INFIX, "homothetic", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223D'}, OperatorForm.INFIX, "reversed tilde", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223D', '\u0331'}, OperatorForm.INFIX, "reversed tilde with underline", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223E'}, OperatorForm.INFIX, "inverted lazy s", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u223F'}, OperatorForm.INFIX, "sine wave", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2242'}, OperatorForm.INFIX, "minus tilde", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2242', '\u0338'}, OperatorForm.INFIX, "minus tilde with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224A'}, OperatorForm.INFIX, "almost equal or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224B'}, OperatorForm.INFIX, "triple tilde", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224C'}, OperatorForm.INFIX, "all equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224E'}, OperatorForm.INFIX, "geometrically equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224E', '\u0338'}, OperatorForm.INFIX, "geometrically equivalent to with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224F'}, OperatorForm.INFIX, "difference between", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u224F', '\u0338'}, OperatorForm.INFIX, "difference between with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2250'}, OperatorForm.INFIX, "approaches the limit", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2251'}, OperatorForm.INFIX, "geometrically equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2252'}, OperatorForm.INFIX, "approximately equal to or the image of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2253'}, OperatorForm.INFIX, "image of or approximately equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2255'}, OperatorForm.INFIX, "equals colon", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2256'}, OperatorForm.INFIX, "ring in equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2258'}, OperatorForm.INFIX, "corresponds to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225D'}, OperatorForm.INFIX, "equal to by definition", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u225E'}, OperatorForm.INFIX, "measured by", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2263'}, OperatorForm.INFIX, "strictly equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2266'}, OperatorForm.INFIX, "less-than over equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2266', '\u0338'}, OperatorForm.INFIX, "less-than over equal to with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2267'}, OperatorForm.INFIX, "greater-than over equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u226C'}, OperatorForm.INFIX, "between", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2272'}, OperatorForm.INFIX, "less-than or equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2273'}, OperatorForm.INFIX, "greater-than or equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2274'}, OperatorForm.INFIX, "neither less-than nor equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2275'}, OperatorForm.INFIX, "neither greater-than nor equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2276'}, OperatorForm.INFIX, "less-than or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2277'}, OperatorForm.INFIX, "greater-than or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2278'}, OperatorForm.INFIX, "neither less-than nor greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2279'}, OperatorForm.INFIX, "neither greater-than nor less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227E'}, OperatorForm.INFIX, "precedes or equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227F'}, OperatorForm.INFIX, "succeeds or equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u227F', '\u0338'}, OperatorForm.INFIX, "succeeds or equivalent to with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228C'}, OperatorForm.INFIX, "multiset", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228D'}, OperatorForm.INFIX, "multiset multiplication", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228E'}, OperatorForm.INFIX, "multiset union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228F'}, OperatorForm.INFIX, "square image of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u228F', '\u0338'}, OperatorForm.INFIX, "square image of with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2290'}, OperatorForm.INFIX, "square original of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2290', '\u0338'}, OperatorForm.INFIX, "square original of with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2291'}, OperatorForm.INFIX, "square image of or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2292'}, OperatorForm.INFIX, "square original of or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2293'}, OperatorForm.INFIX, "square cap", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2294'}, OperatorForm.INFIX, "square cup", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229A'}, OperatorForm.INFIX, "circled ring operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229B'}, OperatorForm.INFIX, "circled asterisk operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229C'}, OperatorForm.INFIX, "circled equals", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229D'}, OperatorForm.INFIX, "circled dash", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A6'}, OperatorForm.INFIX, "assertion", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A7'}, OperatorForm.INFIX, "models", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AA'}, OperatorForm.INFIX, "triple vertical bar right turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22AB'}, OperatorForm.INFIX, "double vertical bar double right turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B0'}, OperatorForm.INFIX, "precedes under relation", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B1'}, OperatorForm.INFIX, "succeeds under relation", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B2'}, OperatorForm.INFIX, "normal subgroup of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B3'}, OperatorForm.INFIX, "contains as normal subgroup", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B6'}, OperatorForm.INFIX, "original of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B7'}, OperatorForm.INFIX, "image of", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B9'}, OperatorForm.INFIX, "hermitian conjugate matrix", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BA'}, OperatorForm.INFIX, "intercalate", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BB'}, OperatorForm.INFIX, "xor", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BC'}, OperatorForm.INFIX, "nand", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BD'}, OperatorForm.INFIX, "nor", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BE'}, OperatorForm.INFIX, "right angle with arc", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22BF'}, OperatorForm.INFIX, "right triangle", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C4'}, OperatorForm.INFIX, "diamond operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C6'}, OperatorForm.INFIX, "star operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C7'}, OperatorForm.INFIX, "division times", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C8'}, OperatorForm.INFIX, "bowtie", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CD'}, OperatorForm.INFIX, "reversed tilde equals", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CE'}, OperatorForm.INFIX, "curly logical or", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22CF'}, OperatorForm.INFIX, "curly logical and", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D0'}, OperatorForm.INFIX, "double subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D1'}, OperatorForm.INFIX, "double superset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D2'}, OperatorForm.INFIX, "double intersection", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D3'}, OperatorForm.INFIX, "double union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22D5'}, OperatorForm.INFIX, "equal and parallel to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DA'}, OperatorForm.INFIX, "less-than equal to or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DB'}, OperatorForm.INFIX, "greater-than equal to or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DC'}, OperatorForm.INFIX, "equal to or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DD'}, OperatorForm.INFIX, "equal to or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DE'}, OperatorForm.INFIX, "equal to or precedes", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22DF'}, OperatorForm.INFIX, "equal to or succeeds", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E0'}, OperatorForm.INFIX, "does not precede or equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E1'}, OperatorForm.INFIX, "does not succeed or equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E2'}, OperatorForm.INFIX, "not square image of or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E3'}, OperatorForm.INFIX, "not square original of or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E4'}, OperatorForm.INFIX, "square image of or not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E5'}, OperatorForm.INFIX, "square original of or not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E6'}, OperatorForm.INFIX, "less-than but not equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E7'}, OperatorForm.INFIX, "greater-than but not equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E8'}, OperatorForm.INFIX, "precedes but not equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22E9'}, OperatorForm.INFIX, "succeeds but not equivalent to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F0'}, OperatorForm.INFIX, "up right diagonal ellipsis", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F2'}, OperatorForm.INFIX, "element of with long horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F3'}, OperatorForm.INFIX, "element of with vertical bar at end of horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F4'}, OperatorForm.INFIX, "small element of with vertical bar at end of horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F5'}, OperatorForm.INFIX, "element of with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F6'}, OperatorForm.INFIX, "element of with overbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F7'}, OperatorForm.INFIX, "small element of with overbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F8'}, OperatorForm.INFIX, "element of with underbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22F9'}, OperatorForm.INFIX, "element of with two horizontal strokes", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FA'}, OperatorForm.INFIX, "contains with long horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FB'}, OperatorForm.INFIX, "contains with vertical bar at end of horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FC'}, OperatorForm.INFIX, "small contains with vertical bar at end of horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FD'}, OperatorForm.INFIX, "contains with overbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FE'}, OperatorForm.INFIX, "small contains with overbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22FF'}, OperatorForm.INFIX, "z notation bag membership", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u25B2'}, OperatorForm.INFIX, "black up-pointing triangle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2758'}, OperatorForm.INFIX, "light vertical bar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2981'}, OperatorForm.INFIX, "z notation spot", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2982'}, OperatorForm.INFIX, "z notation type colon", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A0'}, OperatorForm.INFIX, "spherical angle opening left", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A1'}, OperatorForm.INFIX, "spherical angle opening up", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A2'}, OperatorForm.INFIX, "turned angle", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A3'}, OperatorForm.INFIX, "reversed angle", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A4'}, OperatorForm.INFIX, "angle with underbar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A5'}, OperatorForm.INFIX, "reversed angle with underbar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A6'}, OperatorForm.INFIX, "oblique angle opening up", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A7'}, OperatorForm.INFIX, "oblique angle opening down", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A8'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing up and right", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29A9'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing up and left", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AA'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing down and right", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AB'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing down and left", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AC'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing right and up", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AD'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing left and up", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AE'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing right and down", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29AF'}, OperatorForm.INFIX, "measured angle with open arm ending in arrow pointing left and down", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B0'}, OperatorForm.INFIX, "reversed empty set", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B1'}, OperatorForm.INFIX, "empty set with overbar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B2'}, OperatorForm.INFIX, "empty set with small circle above", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B3'}, OperatorForm.INFIX, "empty set with right arrow above", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B4'}, OperatorForm.INFIX, "empty set with left arrow above", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B5'}, OperatorForm.INFIX, "circle with horizontal bar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B6'}, OperatorForm.INFIX, "circled vertical bar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B7'}, OperatorForm.INFIX, "circled parallel", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B8'}, OperatorForm.INFIX, "circled reverse solidus", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29B9'}, OperatorForm.INFIX, "circled perpendicular", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BA'}, OperatorForm.INFIX, "circle divided by horizontal bar and top half divided by vertical bar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BB'}, OperatorForm.INFIX, "circle with superimposed x", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BC'}, OperatorForm.INFIX, "circled anticlockwise-rotated division sign", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BD'}, OperatorForm.INFIX, "up arrow through circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BE'}, OperatorForm.INFIX, "circled white bullet", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29BF'}, OperatorForm.INFIX, "circled bullet", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C2'}, OperatorForm.INFIX, "circle with small circle to the right", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C3'}, OperatorForm.INFIX, "circle with two horizontal strokes to the right", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C4'}, OperatorForm.INFIX, "squared rising diagonal slash", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C5'}, OperatorForm.INFIX, "squared falling diagonal slash", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C6'}, OperatorForm.INFIX, "squared asterisk", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C7'}, OperatorForm.INFIX, "squared small circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C8'}, OperatorForm.INFIX, "squared square", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29C9'}, OperatorForm.INFIX, "two joined squares", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CA'}, OperatorForm.INFIX, "triangle with dot above", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CB'}, OperatorForm.INFIX, "triangle with underbar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CC'}, OperatorForm.INFIX, "s in triangle", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CD'}, OperatorForm.INFIX, "triangle with serifs at bottom", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CE'}, OperatorForm.INFIX, "right triangle above left triangle", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CF'}, OperatorForm.INFIX, "left triangle beside vertical bar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29CF', '\u0338'}, OperatorForm.INFIX, "left triangle beside vertical bar with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D0'}, OperatorForm.INFIX, "vertical bar beside right triangle", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D0', '\u0338'}, OperatorForm.INFIX, "vertical bar beside right triangle with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D1'}, OperatorForm.INFIX, "bowtie with left half black", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D2'}, OperatorForm.INFIX, "bowtie with right half black", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D3'}, OperatorForm.INFIX, "black bowtie", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D4'}, OperatorForm.INFIX, "times with left half black", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D5'}, OperatorForm.INFIX, "times with right half black", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D6'}, OperatorForm.INFIX, "white hourglass", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D7'}, OperatorForm.INFIX, "black hourglass", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D8'}, OperatorForm.INFIX, "left wiggly fence", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29D9'}, OperatorForm.INFIX, "right wiggly fence", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29DB'}, OperatorForm.INFIX, "right double wiggly fence", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29DC'}, OperatorForm.INFIX, "incomplete infinity", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29DD'}, OperatorForm.INFIX, "tie over infinity", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29DE'}, OperatorForm.INFIX, "infinity negated with vertical bar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E0'}, OperatorForm.INFIX, "square with contoured outline", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E1'}, OperatorForm.INFIX, "increases as", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E2'}, OperatorForm.INFIX, "shuffle product", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E7'}, OperatorForm.INFIX, "thermodynamic", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E8'}, OperatorForm.INFIX, "down-pointing triangle with left half black", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29E9'}, OperatorForm.INFIX, "down-pointing triangle with right half black", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29EA'}, OperatorForm.INFIX, "black diamond with down arrow", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29EB'}, OperatorForm.INFIX, "black lozenge", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29EC'}, OperatorForm.INFIX, "white circle with down arrow", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29ED'}, OperatorForm.INFIX, "black circle with down arrow", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29EE'}, OperatorForm.INFIX, "error-barred white square", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F0'}, OperatorForm.INFIX, "error-barred white diamond", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F1'}, OperatorForm.INFIX, "error-barred black diamond", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F2'}, OperatorForm.INFIX, "error-barred white circle", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F5'}, OperatorForm.INFIX, "reverse solidus operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F6'}, OperatorForm.INFIX, "solidus with overbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F7'}, OperatorForm.INFIX, "reverse solidus with horizontal stroke", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F8'}, OperatorForm.INFIX, "big solidus", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F9'}, OperatorForm.INFIX, "big reverse solidus", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FA'}, OperatorForm.INFIX, "double plus", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FB'}, OperatorForm.INFIX, "triple plus", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FE'}, OperatorForm.INFIX, "tiny", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29FF'}, OperatorForm.INFIX, "miny", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1D'}, OperatorForm.INFIX, "join", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1E'}, OperatorForm.INFIX, "large left triangle operator", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1F'}, OperatorForm.INFIX, "z notation schema composition", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A20'}, OperatorForm.INFIX, "z notation schema piping", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A21'}, OperatorForm.INFIX, "z notation schema projection", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A22'}, OperatorForm.INFIX, "plus sign with small circle above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A23'}, OperatorForm.INFIX, "plus sign with circumflex accent above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A24'}, OperatorForm.INFIX, "plus sign with tilde above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A25'}, OperatorForm.INFIX, "plus sign with dot below", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A26'}, OperatorForm.INFIX, "plus sign with tilde below", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A27'}, OperatorForm.INFIX, "plus sign with subscript two", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A28'}, OperatorForm.INFIX, "plus sign with black triangle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A29'}, OperatorForm.INFIX, "minus sign with comma above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2A'}, OperatorForm.INFIX, "minus sign with dot below", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2B'}, OperatorForm.INFIX, "minus sign with falling dots", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2C'}, OperatorForm.INFIX, "minus sign with rising dots", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2D'}, OperatorForm.INFIX, "plus sign in left half circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2E'}, OperatorForm.INFIX, "plus sign in right half circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A30'}, OperatorForm.INFIX, "multiplication sign with dot above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A31'}, OperatorForm.INFIX, "multiplication sign with underbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A32'}, OperatorForm.INFIX, "semidirect product with bottom closed", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A33'}, OperatorForm.INFIX, "smash product", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A34'}, OperatorForm.INFIX, "multiplication sign in left half circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A35'}, OperatorForm.INFIX, "multiplication sign in right half circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A36'}, OperatorForm.INFIX, "circled multiplication sign with circumflex accent", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A37'}, OperatorForm.INFIX, "multiplication sign in double circle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A38'}, OperatorForm.INFIX, "circled division sign", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A39'}, OperatorForm.INFIX, "plus sign in triangle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3A'}, OperatorForm.INFIX, "minus sign in triangle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3B'}, OperatorForm.INFIX, "multiplication sign in triangle", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3C'}, OperatorForm.INFIX, "interior product", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3D'}, OperatorForm.INFIX, "righthand interior product", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3E'}, OperatorForm.INFIX, "z notation relational composition", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A40'}, OperatorForm.INFIX, "intersection with dot", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A41'}, OperatorForm.INFIX, "union with minus sign", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A42'}, OperatorForm.INFIX, "union with overbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A43'}, OperatorForm.INFIX, "intersection with overbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A44'}, OperatorForm.INFIX, "intersection with logical and", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A45'}, OperatorForm.INFIX, "union with logical or", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A46'}, OperatorForm.INFIX, "union above intersection", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A47'}, OperatorForm.INFIX, "intersection above union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A48'}, OperatorForm.INFIX, "union above bar above intersection", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A49'}, OperatorForm.INFIX, "intersection above bar above union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4A'}, OperatorForm.INFIX, "union beside and joined with union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4B'}, OperatorForm.INFIX, "intersection beside and joined with intersection", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4C'}, OperatorForm.INFIX, "closed union with serifs", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4D'}, OperatorForm.INFIX, "closed intersection with serifs", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4E'}, OperatorForm.INFIX, "double square intersection", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A4F'}, OperatorForm.INFIX, "double square union", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A50'}, OperatorForm.INFIX, "closed union with serifs and smash product", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A51'}, OperatorForm.INFIX, "logical and with dot above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A52'}, OperatorForm.INFIX, "logical or with dot above", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A53'}, OperatorForm.INFIX, "double logical and", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A54'}, OperatorForm.INFIX, "double logical or", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A55'}, OperatorForm.INFIX, "two intersecting logical and", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A56'}, OperatorForm.INFIX, "two intersecting logical or", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A57'}, OperatorForm.INFIX, "sloping large or", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A58'}, OperatorForm.INFIX, "sloping large and", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A59'}, OperatorForm.INFIX, "logical or overlapping logical and", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5A'}, OperatorForm.INFIX, "logical and with middle stem", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5B'}, OperatorForm.INFIX, "logical or with middle stem", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5C'}, OperatorForm.INFIX, "logical and with horizontal dash", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5D'}, OperatorForm.INFIX, "logical or with horizontal dash", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5E'}, OperatorForm.INFIX, "logical and with double overbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A5F'}, OperatorForm.INFIX, "logical and with underbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A60'}, OperatorForm.INFIX, "logical and with double underbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A61'}, OperatorForm.INFIX, "small vee with underbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A62'}, OperatorForm.INFIX, "logical or with double overbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A63'}, OperatorForm.INFIX, "logical or with double underbar", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A64'}, OperatorForm.INFIX, "z notation domain antirestriction", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A65'}, OperatorForm.INFIX, "z notation range antirestriction", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A66'}, OperatorForm.INFIX, "equals sign with dot below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A67'}, OperatorForm.INFIX, "identical with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A68'}, OperatorForm.INFIX, "triple horizontal bar with double vertical stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A69'}, OperatorForm.INFIX, "triple horizontal bar with triple vertical stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6A'}, OperatorForm.INFIX, "tilde operator with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6B'}, OperatorForm.INFIX, "tilde operator with rising dots", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6C'}, OperatorForm.INFIX, "similar minus similar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6D'}, OperatorForm.INFIX, "congruent with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6E'}, OperatorForm.INFIX, "equals with asterisk", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A6F'}, OperatorForm.INFIX, "almost equal to with circumflex accent", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A70'}, OperatorForm.INFIX, "approximately equal or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A71'}, OperatorForm.INFIX, "equals sign above plus sign", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A72'}, OperatorForm.INFIX, "plus sign above equals sign", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A73'}, OperatorForm.INFIX, "equals sign above tilde operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A74'}, OperatorForm.INFIX, "double colon equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A75'}, OperatorForm.INFIX, "two consecutive equals signs", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A76'}, OperatorForm.INFIX, "three consecutive equals signs", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A77'}, OperatorForm.INFIX, "equals sign with two dots above and two dots below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A78'}, OperatorForm.INFIX, "equivalent with four dots above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A79'}, OperatorForm.INFIX, "less-than with circle inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7A'}, OperatorForm.INFIX, "greater-than with circle inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7B'}, OperatorForm.INFIX, "less-than with question mark above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7C'}, OperatorForm.INFIX, "greater-than with question mark above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7D'}, OperatorForm.INFIX, "less-than or slanted equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7D', '\u0338'}, OperatorForm.INFIX, "less-than or slanted equal to with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7E'}, OperatorForm.INFIX, "greater-than or slanted equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7E', '\u0338'}, OperatorForm.INFIX, "greater-than or slanted equal to with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A7F'}, OperatorForm.INFIX, "less-than or slanted equal to with dot inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A80'}, OperatorForm.INFIX, "greater-than or slanted equal to with dot inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A81'}, OperatorForm.INFIX, "less-than or slanted equal to with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A82'}, OperatorForm.INFIX, "greater-than or slanted equal to with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A83'}, OperatorForm.INFIX, "less-than or slanted equal to with dot above right", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A84'}, OperatorForm.INFIX, "greater-than or slanted equal to with dot above left", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A85'}, OperatorForm.INFIX, "less-than or approximate", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A86'}, OperatorForm.INFIX, "greater-than or approximate", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A89'}, OperatorForm.INFIX, "less-than and not approximate", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8A'}, OperatorForm.INFIX, "greater-than and not approximate", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8B'}, OperatorForm.INFIX, "less-than above double-line equal above greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8C'}, OperatorForm.INFIX, "greater-than above double-line equal above less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8D'}, OperatorForm.INFIX, "less-than above similar or equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8E'}, OperatorForm.INFIX, "greater-than above similar or equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A8F'}, OperatorForm.INFIX, "less-than above similar above greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A90'}, OperatorForm.INFIX, "greater-than above similar above less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A91'}, OperatorForm.INFIX, "less-than above greater-than above double-line equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A92'}, OperatorForm.INFIX, "greater-than above less-than above double-line equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A93'}, OperatorForm.INFIX, "less-than above slanted equal above greater-than above slanted equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A94'}, OperatorForm.INFIX, "greater-than above slanted equal above less-than above slanted equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A95'}, OperatorForm.INFIX, "slanted equal to or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A96'}, OperatorForm.INFIX, "slanted equal to or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A97'}, OperatorForm.INFIX, "slanted equal to or less-than with dot inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A98'}, OperatorForm.INFIX, "slanted equal to or greater-than with dot inside", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A99'}, OperatorForm.INFIX, "double-line equal to or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9A'}, OperatorForm.INFIX, "double-line equal to or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9B'}, OperatorForm.INFIX, "double-line slanted equal to or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9C'}, OperatorForm.INFIX, "double-line slanted equal to or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9D'}, OperatorForm.INFIX, "similar or less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9E'}, OperatorForm.INFIX, "similar or greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A9F'}, OperatorForm.INFIX, "similar above less-than above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA0'}, OperatorForm.INFIX, "similar above greater-than above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA1'}, OperatorForm.INFIX, "double nested less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA1', '\u0338'}, OperatorForm.INFIX, "double nested less-than with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA2'}, OperatorForm.INFIX, "double nested greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA2', '\u0338'}, OperatorForm.INFIX, "double nested greater-than with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA3'}, OperatorForm.INFIX, "double nested less-than with underbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA4'}, OperatorForm.INFIX, "greater-than overlapping less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA5'}, OperatorForm.INFIX, "greater-than beside less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA6'}, OperatorForm.INFIX, "less-than closed by curve", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA7'}, OperatorForm.INFIX, "greater-than closed by curve", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA8'}, OperatorForm.INFIX, "less-than closed by curve above slanted equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AA9'}, OperatorForm.INFIX, "greater-than closed by curve above slanted equal", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAA'}, OperatorForm.INFIX, "smaller than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAB'}, OperatorForm.INFIX, "larger than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAC'}, OperatorForm.INFIX, "smaller than or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAD'}, OperatorForm.INFIX, "larger than or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AAE'}, OperatorForm.INFIX, "equals sign with bumpy above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB1'}, OperatorForm.INFIX, "precedes above single-line not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB2'}, OperatorForm.INFIX, "succeeds above single-line not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB3'}, OperatorForm.INFIX, "precedes above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB4'}, OperatorForm.INFIX, "succeeds above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB5'}, OperatorForm.INFIX, "precedes above not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB6'}, OperatorForm.INFIX, "succeeds above not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB7'}, OperatorForm.INFIX, "precedes above almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB8'}, OperatorForm.INFIX, "succeeds above almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AB9'}, OperatorForm.INFIX, "precedes above not almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABA'}, OperatorForm.INFIX, "succeeds above not almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABB'}, OperatorForm.INFIX, "double precedes", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABC'}, OperatorForm.INFIX, "double succeeds", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABD'}, OperatorForm.INFIX, "subset with dot", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABE'}, OperatorForm.INFIX, "superset with dot", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ABF'}, OperatorForm.INFIX, "subset with plus sign below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC0'}, OperatorForm.INFIX, "superset with plus sign below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC1'}, OperatorForm.INFIX, "subset with multiplication sign below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC2'}, OperatorForm.INFIX, "superset with multiplication sign below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC3'}, OperatorForm.INFIX, "subset of or equal to with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC4'}, OperatorForm.INFIX, "superset of or equal to with dot above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC5'}, OperatorForm.INFIX, "subset of above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC6'}, OperatorForm.INFIX, "superset of above equals sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC7'}, OperatorForm.INFIX, "subset of above tilde operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC8'}, OperatorForm.INFIX, "superset of above tilde operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AC9'}, OperatorForm.INFIX, "subset of above almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACA'}, OperatorForm.INFIX, "superset of above almost equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACB'}, OperatorForm.INFIX, "subset of above not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACC'}, OperatorForm.INFIX, "superset of above not equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACD'}, OperatorForm.INFIX, "square left open box operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACE'}, OperatorForm.INFIX, "square right open box operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ACF'}, OperatorForm.INFIX, "closed subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD0'}, OperatorForm.INFIX, "closed superset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD1'}, OperatorForm.INFIX, "closed subset or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD2'}, OperatorForm.INFIX, "closed superset or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD3'}, OperatorForm.INFIX, "subset above superset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD4'}, OperatorForm.INFIX, "superset above subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD5'}, OperatorForm.INFIX, "subset above subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD6'}, OperatorForm.INFIX, "superset above superset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD7'}, OperatorForm.INFIX, "superset beside subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD8'}, OperatorForm.INFIX, "superset beside and joined by dash with subset", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AD9'}, OperatorForm.INFIX, "element of opening downwards", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADA'}, OperatorForm.INFIX, "pitchfork with tee top", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADB'}, OperatorForm.INFIX, "transversal intersection", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADD'}, OperatorForm.INFIX, "nonforking", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADD', '\u0338'}, OperatorForm.INFIX, "nonforking with slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADE'}, OperatorForm.INFIX, "short left tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2ADF'}, OperatorForm.INFIX, "short down tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE0'}, OperatorForm.INFIX, "short up tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE1'}, OperatorForm.INFIX, "perpendicular with s", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE2'}, OperatorForm.INFIX, "vertical bar triple right turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE3'}, OperatorForm.INFIX, "double vertical bar left turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE4'}, OperatorForm.INFIX, "vertical bar double left turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE5'}, OperatorForm.INFIX, "double vertical bar double left turnstile", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE6'}, OperatorForm.INFIX, "long dash from left member of double vertical", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE7'}, OperatorForm.INFIX, "short down tack with overbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE8'}, OperatorForm.INFIX, "short up tack with underbar", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AE9'}, OperatorForm.INFIX, "short up tack above short down tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AEA'}, OperatorForm.INFIX, "double down tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AEB'}, OperatorForm.INFIX, "double up tack", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AEC'}, OperatorForm.INFIX, "double stroke not sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AED'}, OperatorForm.INFIX, "reversed double stroke not sign", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AEE'}, OperatorForm.INFIX, "does not divide with reversed negation slash", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AEF'}, OperatorForm.INFIX, "vertical line with circle above", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF0'}, OperatorForm.INFIX, "vertical line with circle below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF1'}, OperatorForm.INFIX, "down tack with circle below", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF2'}, OperatorForm.INFIX, "parallel with horizontal stroke", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF3'}, OperatorForm.INFIX, "parallel with tilde operator", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF4'}, OperatorForm.INFIX, "triple vertical bar binary relation", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF5'}, OperatorForm.INFIX, "triple vertical bar with horizontal stroke", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF6'}, OperatorForm.INFIX, "triple colon operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF7'}, OperatorForm.INFIX, "triple nested less-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF8'}, OperatorForm.INFIX, "triple nested greater-than", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AF9'}, OperatorForm.INFIX, "double-line slanted less-than or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFA'}, OperatorForm.INFIX, "double-line slanted greater-than or equal to", 265, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFB'}, OperatorForm.INFIX, "triple solidus binary relation", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFD'}, OperatorForm.INFIX, "double solidus operator", 265, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFE'}, OperatorForm.INFIX, "white vertical bar", 265, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.INFIX, "vertical line", 270, 2, 2, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.INFIX, "multiple character operator: ||", 270, 2, 2, true, false, true, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007c'}, OperatorForm.INFIX, "multiple character operator: |||", 270, 2, 2, true, true, false, true, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2190'}, OperatorForm.INFIX, "leftwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2191'}, OperatorForm.INFIX, "upwards arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2192'}, OperatorForm.INFIX, "rightwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2193'}, OperatorForm.INFIX, "downwards arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2194'}, OperatorForm.INFIX, "left right arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2195'}, OperatorForm.INFIX, "up down arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2196'}, OperatorForm.INFIX, "north west arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2197'}, OperatorForm.INFIX, "north east arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2198'}, OperatorForm.INFIX, "south east arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2199'}, OperatorForm.INFIX, "south west arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219A'}, OperatorForm.INFIX, "leftwards arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219B'}, OperatorForm.INFIX, "rightwards arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219C'}, OperatorForm.INFIX, "leftwards wave arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219D'}, OperatorForm.INFIX, "rightwards wave arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219E'}, OperatorForm.INFIX, "leftwards two headed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u219F'}, OperatorForm.INFIX, "upwards two headed arrow", 270, 5, 5, false, true, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A0'}, OperatorForm.INFIX, "rightwards two headed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A1'}, OperatorForm.INFIX, "downwards two headed arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A2'}, OperatorForm.INFIX, "leftwards arrow with tail", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A3'}, OperatorForm.INFIX, "rightwards arrow with tail", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A4'}, OperatorForm.INFIX, "leftwards arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A5'}, OperatorForm.INFIX, "upwards arrow from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A6'}, OperatorForm.INFIX, "rightwards arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A7'}, OperatorForm.INFIX, "downwards arrow from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A8'}, OperatorForm.INFIX, "up down arrow with base", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21A9'}, OperatorForm.INFIX, "leftwards arrow with hook", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AA'}, OperatorForm.INFIX, "rightwards arrow with hook", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AB'}, OperatorForm.INFIX, "leftwards arrow with loop", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AC'}, OperatorForm.INFIX, "rightwards arrow with loop", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AD'}, OperatorForm.INFIX, "left right wave arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AE'}, OperatorForm.INFIX, "left right arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21AF'}, OperatorForm.INFIX, "downwards zigzag arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B0'}, OperatorForm.INFIX, "upwards arrow with tip leftwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B1'}, OperatorForm.INFIX, "upwards arrow with tip rightwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B2'}, OperatorForm.INFIX, "downwards arrow with tip leftwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B3'}, OperatorForm.INFIX, "downwards arrow with tip rightwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B4'}, OperatorForm.INFIX, "rightwards arrow with corner downwards", 270, 5, 5, false, false, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B5'}, OperatorForm.INFIX, "downwards arrow with corner leftwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B6'}, OperatorForm.INFIX, "anticlockwise top semicircle arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B7'}, OperatorForm.INFIX, "clockwise top semicircle arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B8'}, OperatorForm.INFIX, "north west arrow to long bar", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21B9'}, OperatorForm.INFIX, "leftwards arrow to bar over rightwards arrow to bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BA'}, OperatorForm.INFIX, "anticlockwise open circle arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BB'}, OperatorForm.INFIX, "clockwise open circle arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BC'}, OperatorForm.INFIX, "leftwards harpoon with barb upwards", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BD'}, OperatorForm.INFIX, "leftwards harpoon with barb downwards", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BE'}, OperatorForm.INFIX, "upwards harpoon with barb rightwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21BF'}, OperatorForm.INFIX, "upwards harpoon with barb leftwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C0'}, OperatorForm.INFIX, "rightwards harpoon with barb upwards", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C1'}, OperatorForm.INFIX, "rightwards harpoon with barb downwards", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C2'}, OperatorForm.INFIX, "downwards harpoon with barb rightwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C3'}, OperatorForm.INFIX, "downwards harpoon with barb leftwards", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C4'}, OperatorForm.INFIX, "rightwards arrow over leftwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C5'}, OperatorForm.INFIX, "upwards arrow leftwards of downwards arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C6'}, OperatorForm.INFIX, "leftwards arrow over rightwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C7'}, OperatorForm.INFIX, "leftwards paired arrows", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C8'}, OperatorForm.INFIX, "upwards paired arrows", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21C9'}, OperatorForm.INFIX, "rightwards paired arrows", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CA'}, OperatorForm.INFIX, "downwards paired arrows", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CB'}, OperatorForm.INFIX, "leftwards harpoon over rightwards harpoon", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CC'}, OperatorForm.INFIX, "rightwards harpoon over leftwards harpoon", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CD'}, OperatorForm.INFIX, "leftwards double arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CE'}, OperatorForm.INFIX, "left right double arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21CF'}, OperatorForm.INFIX, "rightwards double arrow with stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D0'}, OperatorForm.INFIX, "leftwards double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D1'}, OperatorForm.INFIX, "upwards double arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D2'}, OperatorForm.INFIX, "rightwards double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D3'}, OperatorForm.INFIX, "downwards double arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D4'}, OperatorForm.INFIX, "left right double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D5'}, OperatorForm.INFIX, "up down double arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D6'}, OperatorForm.INFIX, "north west double arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D7'}, OperatorForm.INFIX, "north east double arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D8'}, OperatorForm.INFIX, "south east double arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21D9'}, OperatorForm.INFIX, "south west double arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DA'}, OperatorForm.INFIX, "leftwards triple arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DB'}, OperatorForm.INFIX, "rightwards triple arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DC'}, OperatorForm.INFIX, "leftwards squiggle arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DD'}, OperatorForm.INFIX, "rightwards squiggle arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DE'}, OperatorForm.INFIX, "upwards arrow with double stroke", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21DF'}, OperatorForm.INFIX, "downwards arrow with double stroke", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E0'}, OperatorForm.INFIX, "leftwards dashed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E1'}, OperatorForm.INFIX, "upwards dashed arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E2'}, OperatorForm.INFIX, "rightwards dashed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E3'}, OperatorForm.INFIX, "downwards dashed arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E4'}, OperatorForm.INFIX, "leftwards arrow to bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E5'}, OperatorForm.INFIX, "rightwards arrow to bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E6'}, OperatorForm.INFIX, "leftwards white arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E7'}, OperatorForm.INFIX, "upwards white arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E8'}, OperatorForm.INFIX, "rightwards white arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21E9'}, OperatorForm.INFIX, "downwards white arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21EA'}, OperatorForm.INFIX, "upwards white arrow from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21EB'}, OperatorForm.INFIX, "upwards white arrow on pedestal", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21EC'}, OperatorForm.INFIX, "upwards white arrow on pedestal with horizontal bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21ED'}, OperatorForm.INFIX, "upwards white arrow on pedestal with vertical bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21EE'}, OperatorForm.INFIX, "upwards white double arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21EF'}, OperatorForm.INFIX, "upwards white double arrow on pedestal", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F0'}, OperatorForm.INFIX, "rightwards white arrow from wall", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F1'}, OperatorForm.INFIX, "north west arrow to corner", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F2'}, OperatorForm.INFIX, "south east arrow to corner", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F3'}, OperatorForm.INFIX, "up down white arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F4'}, OperatorForm.INFIX, "right arrow with small circle", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F5'}, OperatorForm.INFIX, "downwards arrow leftwards of upwards arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F6'}, OperatorForm.INFIX, "three rightwards arrows", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F7'}, OperatorForm.INFIX, "leftwards arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F8'}, OperatorForm.INFIX, "rightwards arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21F9'}, OperatorForm.INFIX, "left right arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FA'}, OperatorForm.INFIX, "leftwards arrow with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FB'}, OperatorForm.INFIX, "rightwards arrow with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FC'}, OperatorForm.INFIX, "left right arrow with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FD'}, OperatorForm.INFIX, "leftwards open-headed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FE'}, OperatorForm.INFIX, "rightwards open-headed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u21FF'}, OperatorForm.INFIX, "left right open-headed arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22B8'}, OperatorForm.INFIX, "multimap", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F0'}, OperatorForm.INFIX, "upwards quadruple arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F1'}, OperatorForm.INFIX, "downwards quadruple arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F5'}, OperatorForm.INFIX, "long leftwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F6'}, OperatorForm.INFIX, "long rightwards arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F7'}, OperatorForm.INFIX, "long left right arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F8'}, OperatorForm.INFIX, "long leftwards double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27F9'}, OperatorForm.INFIX, "long rightwards double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FA'}, OperatorForm.INFIX, "long left right double arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FB'}, OperatorForm.INFIX, "long leftwards arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FC'}, OperatorForm.INFIX, "long rightwards arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FD'}, OperatorForm.INFIX, "long leftwards double arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FE'}, OperatorForm.INFIX, "long rightwards double arrow from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u27FF'}, OperatorForm.INFIX, "long rightwards squiggle arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2900'}, OperatorForm.INFIX, "rightwards two-headed arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2901'}, OperatorForm.INFIX, "rightwards two-headed arrow with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2902'}, OperatorForm.INFIX, "leftwards double arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2903'}, OperatorForm.INFIX, "rightwards double arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2904'}, OperatorForm.INFIX, "left right double arrow with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2905'}, OperatorForm.INFIX, "rightwards two-headed arrow from bar", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2906'}, OperatorForm.INFIX, "leftwards double arrow from bar", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2907'}, OperatorForm.INFIX, "rightwards double arrow from bar", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2908'}, OperatorForm.INFIX, "downwards arrow with horizontal stroke", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2909'}, OperatorForm.INFIX, "upwards arrow with horizontal stroke", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290A'}, OperatorForm.INFIX, "upwards triple arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290B'}, OperatorForm.INFIX, "downwards triple arrow", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290C'}, OperatorForm.INFIX, "leftwards double dash arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290D'}, OperatorForm.INFIX, "rightwards double dash arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290E'}, OperatorForm.INFIX, "leftwards triple dash arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u290F'}, OperatorForm.INFIX, "rightwards triple dash arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2910'}, OperatorForm.INFIX, "rightwards two-headed triple dash arrow", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2911'}, OperatorForm.INFIX, "rightwards arrow with dotted stem", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2912'}, OperatorForm.INFIX, "upwards arrow to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2913'}, OperatorForm.INFIX, "downwards arrow to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2914'}, OperatorForm.INFIX, "rightwards arrow with tail with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2915'}, OperatorForm.INFIX, "rightwards arrow with tail with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2916'}, OperatorForm.INFIX, "rightwards two-headed arrow with tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2917'}, OperatorForm.INFIX, "rightwards two-headed arrow with tail with vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2918'}, OperatorForm.INFIX, "rightwards two-headed arrow with tail with double vertical stroke", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2919'}, OperatorForm.INFIX, "leftwards arrow-tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291A'}, OperatorForm.INFIX, "rightwards arrow-tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291B'}, OperatorForm.INFIX, "leftwards double arrow-tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291C'}, OperatorForm.INFIX, "rightwards double arrow-tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291D'}, OperatorForm.INFIX, "leftwards arrow to black diamond", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291E'}, OperatorForm.INFIX, "rightwards arrow to black diamond", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u291F'}, OperatorForm.INFIX, "leftwards arrow from bar to black diamond", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2920'}, OperatorForm.INFIX, "rightwards arrow from bar to black diamond", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2921'}, OperatorForm.INFIX, "north west and south east arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2922'}, OperatorForm.INFIX, "north east and south west arrow", 270, 5, 5, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2923'}, OperatorForm.INFIX, "north west arrow with hook", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2924'}, OperatorForm.INFIX, "north east arrow with hook", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2925'}, OperatorForm.INFIX, "south east arrow with hook", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2926'}, OperatorForm.INFIX, "south west arrow with hook", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2927'}, OperatorForm.INFIX, "north west arrow and north east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2928'}, OperatorForm.INFIX, "north east arrow and south east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2929'}, OperatorForm.INFIX, "south east arrow and south west arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292A'}, OperatorForm.INFIX, "south west arrow and north west arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292B'}, OperatorForm.INFIX, "rising diagonal crossing falling diagonal", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292C'}, OperatorForm.INFIX, "falling diagonal crossing rising diagonal", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292D'}, OperatorForm.INFIX, "south east arrow crossing north east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292E'}, OperatorForm.INFIX, "north east arrow crossing south east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u292F'}, OperatorForm.INFIX, "falling diagonal crossing north east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2930'}, OperatorForm.INFIX, "rising diagonal crossing south east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2931'}, OperatorForm.INFIX, "north east arrow crossing north west arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2932'}, OperatorForm.INFIX, "north west arrow crossing north east arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2933'}, OperatorForm.INFIX, "wave arrow pointing directly right", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2934'}, OperatorForm.INFIX, "arrow pointing rightwards then curving upwards", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2935'}, OperatorForm.INFIX, "arrow pointing rightwards then curving downwards", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2936'}, OperatorForm.INFIX, "arrow pointing downwards then curving leftwards", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2937'}, OperatorForm.INFIX, "arrow pointing downwards then curving rightwards", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2938'}, OperatorForm.INFIX, "right-side arc clockwise arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2939'}, OperatorForm.INFIX, "left-side arc anticlockwise arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293A'}, OperatorForm.INFIX, "top arc anticlockwise arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293B'}, OperatorForm.INFIX, "bottom arc anticlockwise arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293C'}, OperatorForm.INFIX, "top arc clockwise arrow with minus", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293D'}, OperatorForm.INFIX, "top arc anticlockwise arrow with plus", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293E'}, OperatorForm.INFIX, "lower right semicircular clockwise arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u293F'}, OperatorForm.INFIX, "lower left semicircular anticlockwise arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2940'}, OperatorForm.INFIX, "anticlockwise closed circle arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2941'}, OperatorForm.INFIX, "clockwise closed circle arrow", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2942'}, OperatorForm.INFIX, "rightwards arrow above short leftwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2943'}, OperatorForm.INFIX, "leftwards arrow above short rightwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2944'}, OperatorForm.INFIX, "short rightwards arrow above leftwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2945'}, OperatorForm.INFIX, "rightwards arrow with plus below", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2946'}, OperatorForm.INFIX, "leftwards arrow with plus below", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2947'}, OperatorForm.INFIX, "rightwards arrow through x", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2948'}, OperatorForm.INFIX, "left right arrow through small circle", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2949'}, OperatorForm.INFIX, "upwards two-headed arrow from small circle", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294A'}, OperatorForm.INFIX, "left barb up right barb down harpoon", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294B'}, OperatorForm.INFIX, "left barb down right barb up harpoon", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294C'}, OperatorForm.INFIX, "up barb right down barb left harpoon", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294D'}, OperatorForm.INFIX, "up barb left down barb right harpoon", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294E'}, OperatorForm.INFIX, "left barb up right barb up harpoon", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u294F'}, OperatorForm.INFIX, "up barb right down barb right harpoon", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2950'}, OperatorForm.INFIX, "left barb down right barb down harpoon", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2951'}, OperatorForm.INFIX, "up barb left down barb left harpoon", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2952'}, OperatorForm.INFIX, "leftwards harpoon with barb up to bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2953'}, OperatorForm.INFIX, "rightwards harpoon with barb up to bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2954'}, OperatorForm.INFIX, "upwards harpoon with barb right to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2955'}, OperatorForm.INFIX, "downwards harpoon with barb right to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2956'}, OperatorForm.INFIX, "leftwards harpoon with barb down to bar", 270, 5, 5, false, false, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2957'}, OperatorForm.INFIX, "rightwards harpoon with barb down to bar", 270, 5, 5, false, false, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2958'}, OperatorForm.INFIX, "upwards harpoon with barb left to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2959'}, OperatorForm.INFIX, "downwards harpoon with barb left to bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295A'}, OperatorForm.INFIX, "leftwards harpoon with barb up from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295B'}, OperatorForm.INFIX, "rightwards harpoon with barb up from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295C'}, OperatorForm.INFIX, "upwards harpoon with barb right from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295D'}, OperatorForm.INFIX, "downwards harpoon with barb right from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295E'}, OperatorForm.INFIX, "leftwards harpoon with barb down from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u295F'}, OperatorForm.INFIX, "rightwards harpoon with barb down from bar", 270, 5, 5, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2960'}, OperatorForm.INFIX, "upwards harpoon with barb left from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2961'}, OperatorForm.INFIX, "downwards harpoon with barb left from bar", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2962'}, OperatorForm.INFIX, "leftwards harpoon with barb up above leftwards harpoon with barb down", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2963'}, OperatorForm.INFIX, "upwards harpoon with barb left beside upwards harpoon with barb right", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2964'}, OperatorForm.INFIX, "rightwards harpoon with barb up above rightwards harpoon with barb down", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2965'}, OperatorForm.INFIX, "downwards harpoon with barb left beside downwards harpoon with barb right", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2966'}, OperatorForm.INFIX, "leftwards harpoon with barb up above rightwards harpoon with barb up", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2967'}, OperatorForm.INFIX, "leftwards harpoon with barb down above rightwards harpoon with barb down", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2968'}, OperatorForm.INFIX, "rightwards harpoon with barb up above leftwards harpoon with barb up", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2969'}, OperatorForm.INFIX, "rightwards harpoon with barb down above leftwards harpoon with barb down", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296A'}, OperatorForm.INFIX, "leftwards harpoon with barb up above long dash", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296B'}, OperatorForm.INFIX, "leftwards harpoon with barb down below long dash", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296C'}, OperatorForm.INFIX, "rightwards harpoon with barb up above long dash", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296D'}, OperatorForm.INFIX, "rightwards harpoon with barb down below long dash", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296E'}, OperatorForm.INFIX, "upwards harpoon with barb left beside downwards harpoon with barb right", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u296F'}, OperatorForm.INFIX, "downwards harpoon with barb left beside upwards harpoon with barb right", 270, 5, 5, false, true, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2970'}, OperatorForm.INFIX, "right double arrow with rounded head", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2971'}, OperatorForm.INFIX, "equals sign above rightwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2972'}, OperatorForm.INFIX, "tilde operator above rightwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2973'}, OperatorForm.INFIX, "leftwards arrow above tilde operator", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2974'}, OperatorForm.INFIX, "rightwards arrow above tilde operator", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2975'}, OperatorForm.INFIX, "rightwards arrow above almost equal to", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2976'}, OperatorForm.INFIX, "less-than above leftwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2977'}, OperatorForm.INFIX, "leftwards arrow through less-than", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2978'}, OperatorForm.INFIX, "greater-than above rightwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2979'}, OperatorForm.INFIX, "subset above rightwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297A'}, OperatorForm.INFIX, "leftwards arrow through subset", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297B'}, OperatorForm.INFIX, "superset above leftwards arrow", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297C'}, OperatorForm.INFIX, "left fish tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297D'}, OperatorForm.INFIX, "right fish tail", 270, 5, 5, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297E'}, OperatorForm.INFIX, "up fish tail", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u297F'}, OperatorForm.INFIX, "down fish tail", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2999'}, OperatorForm.INFIX, "dotted fence", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299A'}, OperatorForm.INFIX, "vertical zigzag line", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299B'}, OperatorForm.INFIX, "measured angle opening left", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299C'}, OperatorForm.INFIX, "right angle variant with square", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299D'}, OperatorForm.INFIX, "measured right angle with dot", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299E'}, OperatorForm.INFIX, "angle with s inside", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u299F'}, OperatorForm.INFIX, "acute angle", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29DF'}, OperatorForm.INFIX, "double-ended multimap", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29EF'}, OperatorForm.INFIX, "error-barred black square", 270, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u29F4'}, OperatorForm.INFIX, "rule-delayed", 270, 5, 5, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2B45'}, OperatorForm.INFIX, "leftwards quadruple arrow", 270, 5, 5, false, false, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2B46'}, OperatorForm.INFIX, "rightwards quadruple arrow", 270, 5, 5, false, false, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002b'}, OperatorForm.INFIX, "plus sign", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002b'}, OperatorForm.PREFIX, "plus sign", 275, 0, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002d'}, OperatorForm.INFIX, "hyphen-minus", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002d'}, OperatorForm.PREFIX, "hyphen-minus", 275, 0, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B1'}, OperatorForm.INFIX, "plus-minus sign", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B1'}, OperatorForm.PREFIX, "plus-minus sign", 275, 0, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2212'}, OperatorForm.INFIX, "minus sign", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2212'}, OperatorForm.PREFIX, "minus sign", 275, 0, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2213'}, OperatorForm.INFIX, "minus-or-plus sign", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2213'}, OperatorForm.PREFIX, "minus-or-plus sign", 275, 0, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2214'}, OperatorForm.INFIX, "dot plus", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229E'}, OperatorForm.INFIX, "squared plus", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u229F'}, OperatorForm.INFIX, "squared minus", 275, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2211'}, OperatorForm.PREFIX, "n-ary summation", 290, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0A'}, OperatorForm.PREFIX, "modulo two sum", 290, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0B'}, OperatorForm.PREFIX, "summation with integral", 290, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222C'}, OperatorForm.PREFIX, "double integral", 300, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222D'}, OperatorForm.PREFIX, "triple integral", 300, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2295'}, OperatorForm.INFIX, "circled plus", 300, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2296'}, OperatorForm.INFIX, "circled minus", 300, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2298'}, OperatorForm.INFIX, "circled division slash", 300, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A01'}, OperatorForm.PREFIX, "n-ary circled plus operator", 300, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222B'}, OperatorForm.PREFIX, "integral", 310, 0, 1, false, false, false, true, false, false, false, true, '\u2320', null, '\u2321', '\u23AE'));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222E'}, OperatorForm.PREFIX, "contour integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222F'}, OperatorForm.PREFIX, "surface integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2230'}, OperatorForm.PREFIX, "volume integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2231'}, OperatorForm.PREFIX, "clockwise integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2232'}, OperatorForm.PREFIX, "clockwise contour integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2233'}, OperatorForm.PREFIX, "anticlockwise contour integral", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0C'}, OperatorForm.PREFIX, "quadruple integral operator", 310, 0, 1, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0D'}, OperatorForm.PREFIX, "finite part integral", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0E'}, OperatorForm.PREFIX, "integral with double stroke", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A0F'}, OperatorForm.PREFIX, "integral average with slash", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A10'}, OperatorForm.PREFIX, "circulation function", 310, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A11'}, OperatorForm.PREFIX, "anticlockwise integration", 310, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A12'}, OperatorForm.PREFIX, "line integration with rectangular path around pole", 310, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A13'}, OperatorForm.PREFIX, "line integration with semicircular path around pole", 310, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A14'}, OperatorForm.PREFIX, "line integration not including the pole", 310, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A15'}, OperatorForm.PREFIX, "integral around a point operator", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A16'}, OperatorForm.PREFIX, "quaternion integral operator", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A17'}, OperatorForm.PREFIX, "integral with leftwards arrow with hook", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A18'}, OperatorForm.PREFIX, "integral with times sign", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A19'}, OperatorForm.PREFIX, "integral with intersection", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1A'}, OperatorForm.PREFIX, "integral with union", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1B'}, OperatorForm.PREFIX, "integral with overbar", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A1C'}, OperatorForm.PREFIX, "integral with underbar", 310, 1, 2, false, false, false, true, false, false, false, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C3'}, OperatorForm.PREFIX, "n-ary union", 320, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A03'}, OperatorForm.PREFIX, "n-ary union operator with dot", 320, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A04'}, OperatorForm.PREFIX, "n-ary union operator with plus", 320, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C0'}, OperatorForm.PREFIX, "n-ary logical and", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C1'}, OperatorForm.PREFIX, "n-ary logical or", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C2'}, OperatorForm.PREFIX, "n-ary intersection", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A00'}, OperatorForm.PREFIX, "n-ary circled dot operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A02'}, OperatorForm.PREFIX, "n-ary circled times operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A05'}, OperatorForm.PREFIX, "n-ary square intersection operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A06'}, OperatorForm.PREFIX, "n-ary square union operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A07'}, OperatorForm.PREFIX, "two logical and operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A08'}, OperatorForm.PREFIX, "two logical or operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A09'}, OperatorForm.PREFIX, "n-ary times operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFC'}, OperatorForm.PREFIX, "large triple vertical bar operator", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2AFF'}, OperatorForm.PREFIX, "n-ary white vertical bar", 330, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2240'}, OperatorForm.INFIX, "wreath product", 340, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u220F'}, OperatorForm.PREFIX, "n-ary product", 350, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2210'}, OperatorForm.PREFIX, "n-ary coproduct", 350, 1, 2, false, false, false, true, false, false, true, true));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2229'}, OperatorForm.INFIX, "intersection", 350, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u222A'}, OperatorForm.INFIX, "union", 350, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002a'}, OperatorForm.INFIX, "asterisk", 390, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002e'}, OperatorForm.INFIX, "full stop", 390, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00D7'}, OperatorForm.INFIX, "multiplication sign", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2022'}, OperatorForm.INFIX, "bullet", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2043'}, OperatorForm.INFIX, "hyphen bullet", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2062'}, OperatorForm.INFIX, "invisible times", 390, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A0'}, OperatorForm.INFIX, "squared times", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22A1'}, OperatorForm.INFIX, "squared dot operator", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u22C5'}, OperatorForm.INFIX, "dot operator", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A2F'}, OperatorForm.INFIX, "vector or cross product", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2A3F'}, OperatorForm.INFIX, "amalgamation or coproduct", 390, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B7'}, OperatorForm.INFIX, "middle dot", 400, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2297'}, OperatorForm.INFIX, "circled times", 410, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0025'}, OperatorForm.INFIX, "percent sign", 640, 3, 3, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\\'}, OperatorForm.INFIX, "reverse solidus", 650, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2216'}, OperatorForm.INFIX, "set minus", 650, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002f'}, OperatorForm.INFIX, "solidus", 660, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00F7'}, OperatorForm.INFIX, "division sign", 660, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2220'}, OperatorForm.PREFIX, "angle", 670, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2221'}, OperatorForm.PREFIX, "measured angle", 670, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2222'}, OperatorForm.PREFIX, "spherical angle", 670, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00AC'}, OperatorForm.PREFIX, "not sign", 680, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2299'}, OperatorForm.INFIX, "circled dot operator", 710, 4, 4, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2202'}, OperatorForm.PREFIX, "partial differential", 740, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2207'}, OperatorForm.PREFIX, "nabla", 740, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002a'}, OperatorForm.INFIX, "multiple character operator: **", 780, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0026'}, OperatorForm.INFIX, "multiple character operator: <>", 780, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005e'}, OperatorForm.INFIX, "circumflex accent", 780, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2032'}, OperatorForm.POSTFIX, "prime", 800, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u266D'}, OperatorForm.POSTFIX, "music flat sign", 800, 0, 2, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u266E'}, OperatorForm.POSTFIX, "music natural sign", 800, 0, 2, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u266F'}, OperatorForm.POSTFIX, "music sharp sign", 800, 0, 2, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0021'}, OperatorForm.POSTFIX, "exclamation mark", 810, 1, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0021'}, OperatorForm.POSTFIX, "multiple character operator: !!", 810, 1, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002f'}, OperatorForm.INFIX, "multiple character operator: //", 820, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0040'}, OperatorForm.INFIX, "commercial at", 825, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u003f'}, OperatorForm.INFIX, "question mark", 835, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2145'}, OperatorForm.PREFIX, "double-struck italic capital d", 845, 2, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2146'}, OperatorForm.PREFIX, "double-struck italic small d", 845, 2, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u221A'}, OperatorForm.PREFIX, "square root", 845, 1, 1, false, true, true, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u221B'}, OperatorForm.PREFIX, "cube root", 845, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u221C'}, OperatorForm.PREFIX, "fourth root", 845, 1, 1, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2061'}, OperatorForm.INFIX, "function application", 850, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0022'}, OperatorForm.POSTFIX, "quotation mark", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0026'}, OperatorForm.POSTFIX, "ampersand", 880, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\''}, OperatorForm.POSTFIX, "apostrophe", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002b'}, OperatorForm.POSTFIX, "multiple character operator: ++", 880, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u002d'}, OperatorForm.POSTFIX, "multiple character operator: --", 880, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005e'}, OperatorForm.POSTFIX, "circumflex accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005f'}, OperatorForm.POSTFIX, "low line", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0060'}, OperatorForm.POSTFIX, "grave accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u007e'}, OperatorForm.POSTFIX, "tilde", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00A8'}, OperatorForm.POSTFIX, "diaeresis", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00AA'}, OperatorForm.POSTFIX, "feminine ordinal indicator", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00AF'}, OperatorForm.POSTFIX, "macron", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B0'}, OperatorForm.POSTFIX, "degree sign", 880, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B2'}, OperatorForm.POSTFIX, "superscript two", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B3'}, OperatorForm.POSTFIX, "superscript three", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B4'}, OperatorForm.POSTFIX, "acute accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B8'}, OperatorForm.POSTFIX, "cedilla", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00B9'}, OperatorForm.POSTFIX, "superscript one", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u00BA'}, OperatorForm.POSTFIX, "masculine ordinal indicator", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02C6'}, OperatorForm.POSTFIX, "modifier letter circumflex accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02C7'}, OperatorForm.POSTFIX, "caron", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02C9'}, OperatorForm.POSTFIX, "modifier letter macron", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02CA'}, OperatorForm.POSTFIX, "modifier letter acute accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02CB'}, OperatorForm.POSTFIX, "modifier letter grave accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02CD'}, OperatorForm.POSTFIX, "modifier letter low macron", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02D8'}, OperatorForm.POSTFIX, "breve", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02D9'}, OperatorForm.POSTFIX, "dot above", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02DA'}, OperatorForm.POSTFIX, "ring above", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02DC'}, OperatorForm.POSTFIX, "small tilde", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02DD'}, OperatorForm.POSTFIX, "double acute accent", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u02F7'}, OperatorForm.POSTFIX, "modifier letter low tilde", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0302'}, OperatorForm.POSTFIX, "combining circumflex accent", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u0311'}, OperatorForm.POSTFIX, "combining inverted breve", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201A'}, OperatorForm.POSTFIX, "single low-9 quotation mark", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201B'}, OperatorForm.POSTFIX, "single high-reversed-9 quotation mark", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201E'}, OperatorForm.POSTFIX, "double low-9 quotation mark", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u201F'}, OperatorForm.POSTFIX, "double high-reversed-9 quotation mark", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2033'}, OperatorForm.POSTFIX, "double prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2034'}, OperatorForm.POSTFIX, "triple prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2035'}, OperatorForm.POSTFIX, "reversed prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2036'}, OperatorForm.POSTFIX, "reversed double prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2037'}, OperatorForm.POSTFIX, "reversed triple prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u203E'}, OperatorForm.POSTFIX, "overline", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2057'}, OperatorForm.POSTFIX, "quadruple prime", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u2064'}, OperatorForm.INFIX, "invisible plus", 880, 0, 0, false, false, false, false, false, false, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u20DB'}, OperatorForm.POSTFIX, "combining three dots above", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u20DC'}, OperatorForm.POSTFIX, "combining four dots above", 880, 0, 0, false, false, false, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23B4'}, OperatorForm.POSTFIX, "top square bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23B5'}, OperatorForm.POSTFIX, "bottom square bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23DC'}, OperatorForm.POSTFIX, "top parenthesis", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23DD'}, OperatorForm.POSTFIX, "bottom parenthesis", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23DE'}, OperatorForm.POSTFIX, "top curly bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23DF'}, OperatorForm.POSTFIX, "bottom curly bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23E0'}, OperatorForm.POSTFIX, "top tortoise shell bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u23E1'}, OperatorForm.POSTFIX, "bottom tortoise shell bracket", 880, 0, 0, false, false, true, false, false, true, false, false));
        registerEntry(new OperatorDictionaryEntry(new char[]{'\u005f'}, OperatorForm.INFIX, "low line", 900, 1, 1, false, false, false, false, false, false, false, false));
    }

    /**
     * Register the passed entry in the dictionary.
     *
     * @param entry to register
     */
    private static void registerEntry(OperatorDictionaryEntry entry) {
        ENTRIES.put(new OperatorDictionaryEntryKey(entry.getForm(), entry.getOperator()), entry);
    }

    /**
     * Get an entry of the dictionary.
     *
     * @param form     to get entry by
     * @param operator to get entry by
     * @return the found entry or an empty optional
     */
    public static Optional<OperatorDictionaryEntry> getEntry(OperatorForm form, char[] operator) {
        return Optional.ofNullable(ENTRIES.get(new OperatorDictionaryEntryKey(form, operator)));
    }

}
